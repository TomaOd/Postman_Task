{
	"info": {
		"_postman_id": "dcdd6e3f-b01b-4e53-9139-d1173878a4d0",
		"name": "Postman Task Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.collectionVariables.set(\"userId\",jsonData.message)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": {{$timestamp}},\n    \"username\": \"{{username}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"email\": \"asd@gmail.com\",\n    \"password\": \"asd\",\n    \"phone\": \"380935647844\",\n    \"userStatus\": 1\n}"
				},
				"url": {
					"raw": "{{url}}/user/",
					"host": [
						"{{url}}"
					],
					"path": [
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user by user name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Verify that username equals asd135\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).to.eql(\"asd135\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/user/{{username}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"user",
						"{{username}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Updated user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": {{userId}},\n    \"username\": \"{{username}}\",\n    \"firstName\": \"Michael\",\n    \"lastName\": \"Jordan\",\n    \"email\": \"asd@gmail.com\",\n    \"password\": \"asd\",\n    \"phone\": \"380935647844\",\n    \"userStatus\": 1\n}"
				},
				"url": {
					"raw": "{{url}}/user/{{username}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"user",
						"{{username}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user by user name (after update)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Verify that username equals asd135\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).to.eql(\"asd135\");\r",
							"});\r",
							"pm.test(\"Verify that firstName equals Michael\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.firstName).to.eql(\"Michael\");\r",
							"});\r",
							"pm.test(\"Verify that lastName equals Jordan\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.lastName).to.eql(\"Jordan\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/user/{{username}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"user",
						"{{username}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"asd135\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/user/{{username}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"user",
						"{{username}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user by user name (after delete) negative case",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Verify that message equals User not found\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"User not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/user/{{username}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"user",
						"{{username}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://petstore.swagger.io/v2"
		},
		{
			"key": "username",
			"value": "asd135"
		},
		{
			"key": "userId",
			"value": ""
		}
	]
}